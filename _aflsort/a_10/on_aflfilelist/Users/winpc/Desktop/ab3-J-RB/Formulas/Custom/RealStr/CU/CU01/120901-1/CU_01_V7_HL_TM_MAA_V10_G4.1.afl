_SECTION_BEGIN("CU_01_V7_HL_TM_MAA_V10_G4");
#include "Formulas/Custom/Helper/BacktestHelper.afl";
#include "Formulas/Custom/Helper/TradeHelper.afl";
#include "Formulas/Custom/BasicV3/exiv.afl";
#include "Formulas/Custom/BasicV3/exv.afl";
#include "Formulas/Custom/BasicV3/hl.afl";
#include "Formulas/Custom/BasicV3/MAA.afl";
#include "Formulas/Custom/BasicV3/V7.afl";
#include "Formulas/Custom/BasicV3/TM.afl";
#include "Formulas/Custom/BasicV3/DFB.afl";

OptimizerSetEngine("spso");
OptimizerSetOption("Runs", 1 );
OptimizerSetOption("MaxEval", 1000);

StrategyName = "CU_01_V7_HL_TM_MAA_V10_G4.1";
StrategyID = 50001;
ProType = 1;


V71=V7min(33,100,39,"CU");
V72=V7min(34,100,25,"CU");
V73=V7min(27,98,10,"CU");
v74=V7min(46,100,0,"CU");
V75=V7min(31,100,11,"CU");

HL1=HLNAVG(132,103,52,"CU");
HL2=HLNAVG2(111,102,0,"CU");
HL3=HLPAVG(102,100,0,"CU");
HL4=HLCAVG(89,39,3,"CU");
HL5=HLNAVG(142,100,46,"CU");
HL6=HLNAVG(139,103,38,"CU");
HL7=HLPAVG(81,100,11,"CU");
HL8=HLNAVG(134,103,41,"CU");

TM1=TimeShareFHLLess(12,12,37,1000,330,"CU");
TM2=TimeShareHLHalfLess(26,28,25,154,450,"CU");
TM3=TimeShareHLHalfLess(27,40,26,154,450,"CU");
TM4=TimeShareHLLess(52,49,5,1000,400,"CU");
TM5=TimeShareHLLess(52,54,8,1000,400,"CU");
TM6=TimeShareHLHalfLess(26,26,28,154,450,"CU");
TM7=TimeShareHLHalfLess(25,33,44,154,450,"CU");
TM8=TimeShareFHLLess(14,17,28,1000,330,"CU");

MAA1=MAArrangeRoll(49,11,0,1000,1000,"CU");
MAA2=MAArrangeRoll(61,6,0,1000,1000,"CU");
MAA3=MAArrangeRoll(50,11,0,1000,1000,"CU");
MAA4=MAArrangeRoll(41,13,0,1000,1000,"CU");
MAA5=MAArrangeRoll(40,17,0,1000,1000,"CU");
MAA6=MAArrangeRoll(43,16,1,1000,1000,"CU");





cond_V7=(V71+V72+V73+V74+V75)/5;
cond_HL=(HL1+HL2+HL3+HL4+HL5+HL6+HL7+HL8)/8;
cond_TM=(TM1+TM2+TM3+TM4+TM5+TM6+TM7+TM8)/8;
cond_MAA=(MAA1+MAA2+MAA3+MAA4+MAA5+MAA6)/6;



w_V7 = ParamOptimize("w_V7",3,0,4,0.5);
w_HL= ParamOptimize("w_HL",1,0,4,0.5);
w_TM= ParamOptimize("w_TM",3,0,4,0.5);
w_MAA= ParamOptimize("w_MAA",0.5,0,4,0.5);

Cond = w_V7 *cond_V7 + w_HL*cond_HL + w_TM*cond_TM + w_MAA*cond_MAA;




Vote=1.0;

BSIG=Cond>Vote;
SSIG=Cond<-Vote;
CSIG=GetLastK("CU");
Buy=BSIG;
Short=SSIG;
Sell=Cover=CSIG;
sinPs=getPS(BSIG,SSIG,CSIG);
sinBS=getSIG(BSIG,SSIG,CSIG,sinPs);
Trading_log(BSIG,SSIG,CSIG,StrategyID,StrategyName,ProType);
PlotPerformance(sinPs,sinBS,StrategyName);
_SECTION_END();